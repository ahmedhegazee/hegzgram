<?php

namespace App;

use App\Mail\NewUserWelcomeMail;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Mail;
use Spatie\Searchable\Searchable;
use Spatie\Searchable\SearchResult;

class User extends Authenticatable implements Searchable
{
    use Notifiable;


    public function getSearchResult(): SearchResult
    {
        $url = route('profile.show', $this->username);
        $image = $this->profile->profileImage();
        $follows = (auth()->user()) ? auth()->user()->following->contains($this->id) : false;
        $friend = auth()->user()->friends->contains($this->id);
        if ($friend)
            $accept = auth()->user()->friends()->where('profile_id', $this->id)->first()->pivot->status;
        else
            $accept = false;
        return new SearchResult($this, $this->username, $url, $image, $this->id, $follows, $friend, $accept);
//        return new SearchResult($this, $this->username, $url);
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $guarded = [];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function ($user) {
            $data = [
                'title' => $user->username,
                'image' => 'default/ccRp67CBjTSpm5R0SlR82dHK0qe0dpkj9CI6MepV.png'
            ];
            //$user->profile()->create($data);
            //Mail::to($user->email)->send(new NewUserWelcomeMail());
        });
    }

    public function following()
    {
        return $this->belongsToMany(User::class,'followings','follower','followee')->withTimestamps();
    }
    public function followers()
    {
        return $this->belongsToMany(User::class,'followings','followee','follower')->withTimestamps();
    }
    public function posts()
    {
        return $this->hasMany(Post::class)->orderBy('created_at', 'DESC');
    }

    public function like()
    {
        return $this->belongsToMany(Post::class)->withTimestamps();
    }

    public function likeComment()
    {
        return $this->belongsToMany(Comment::class)->withTimestamps();
    }

    public function likeReply()
    {
        return $this->belongsToMany(Reply::class)->withTimestamps();
    }

    public function profile()
    {
        return $this->hasOne(Profile::class);
    }

    public function friendsOfMine()
    {
        return $this->belongsToMany('\App\User', 'friends', 'user_id', 'friend_id')
            ->withPivot('status')
            ->withTimestamps();
    }

    public function friendsOfThisUser()
    {
        return $this->belongsToMany('\App\User', 'friends', 'friend_id', 'user_id')
            ->withPivot('status')
            ->withTimestamps();
    }

    public function toggleFriendRequest(User $user)
    {
        if ($this->id != $user->id)
            return $this->friendsOfMine()->toggle($user->id);
        return false;

    }

    public function removeFriendRequest(User $user)
    {
        if ($this->id != $user->id) {
            return $this->friendsOfThisUser()->detach($user->id);
        }
        return false;
    }
    public function acceptFriendRequest(User $user)
    {
            return $this->friendsOfThisUser()->updateExistingPivot($user,['status'=>1]);
    }

    public function getFriendRequests()
    {
        return $this->friendsOfMine()->where('status', 0)->get();
    }

    public function hasFriendRequest(User $user)
    {
        return $user->friendsOfMine->contains($this->id)||$user->friendsOfThisUser->contains($this->id);
}

    public function getFriends()
    {
        return $this->friendsOfMine()->where('status', 1)->get()
            ->concat($this->friendsOfThisUser()->where('status', 1)->get());
    }

    public function getPendingFriendRequests()
    {
        return $this->friendsOfThisUser()->where('status', 0)->get();
    }
}
